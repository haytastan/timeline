{"version":3,"sources":["components/styles.module.css","components/SearchBar.js","components/SearchResult.js","components/UserInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","avatar","event-avatar","content-div","avatar-aligment","navbar","forkMe","SearcBar","state","username","handleChange","e","_this","setState","target","value","_handleKeyPress","key","props","handleSubmit","handleSearchButton","_this2","this","react_default","a","createElement","className","type","onKeyPress","placeholder","autoFocus","name","onChange","onClick","Component","GITHUB_URL","SearcResult","handleLoadButton","page","handlePage","checkeventType","event","url","href","repo","payload","forkee","issue","replace","events","length","map","i","styles","actor","src","UserInfo","_ref","user","login","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getEvents","getUserInfo","axios","get","then","res","data","defineProperty","event_l","toConsumableArray","concat","err","catch","style","marginLeft","components_UserInfo","SearchBar","SearchResult","id","React","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d33357e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"styles_avatar__2eSEr\",\"event-avatar\":\"styles_event-avatar__2VLa_\",\"content-div\":\"styles_content-div__2hxuJ\",\"avatar-aligment\":\"styles_avatar-aligment__3r_0g\",\"navbar\":\"styles_navbar__2h0vE\",\"forkMe\":\"styles_forkMe__128-A\"};","import React, { Component } from 'react';\r\n\r\nclass SearcBar extends Component {\r\n    state = {\r\n        username: ''\r\n    }\r\n   handleChange = (e) => {\r\n       this.setState({username: e.target.value})\r\n       \r\n   }\r\n\r\n   _handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.props.handleSubmit(this.state.username)\r\n    }\r\n  }\r\n\r\n   handleSearchButton = () => {\r\n    this.props.handleSubmit(this.state.username)\r\n   }\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"input-field col s4\">\r\n            <input type=\"text\" onKeyPress={this._handleKeyPress} placeholder=\"Github Username\" autoFocus={true} value={this.state.username} name=\"name\" onChange={this.handleChange}  />\r\n        </div>\r\n        <div className=\"input-field col s4\">\r\n          <button className=\"waves-effect waves-light btn orange accent-2\" onClick={() => {this.handleSearchButton()}}><i className=\"material-icons right\">public</i>Search</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearcBar;\r\n","import React, { Component } from 'react';\r\nimport UserSummary from './UserSummary'\r\nimport styles from './styles.module.css'\r\n\r\nconst GITHUB_URL = \"http://www.github.com/\"\r\nclass SearcResult extends Component {\r\n    handleLoadButton = () => {\r\n        let page = this.props.page;\r\n        page++;\r\n        this.props.handlePage(page)\r\n    }\r\n    checkeventType = (event) => {\r\n        let url;\r\n        switch(event.type){\r\n            case \"WatchEvent\":\r\n                return(\r\n                    <span>\r\n                    starred <a target=\"_blank\" href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"CreateEvent\":\r\n                return(\r\n                    <span>\r\n                        created a repository <a target=\"_blank\" href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"ForkEvent\":\r\n                return(\r\n                    <span>\r\n                        forked&nbsp;\r\n                        <a target=\"_blank\" href={GITHUB_URL+event.payload.forkee['full_name']}>\r\n                            {event.payload.forkee['full_name']}\r\n                        </a> from&nbsp;&nbsp;\r\n                        <a target=\"_blank\" href={GITHUB_URL + event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                    </span>\r\n                )\r\n            case \"PushEvent\":\r\n                return(\r\n                    <span>\r\n                        push event <a target=\"_blank\" href={GITHUB_URL+event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"IssuesEvent\":\r\n            url = event.payload.issue['url'].replace('https://api.github.com/repos/', GITHUB_URL)\r\n            return(\r\n                    <span>\r\n                        issue activites <a target=\"_blank\" href={url}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"PullRequestReviewCommentEvent\":\r\n                return(\r\n                    <span>\r\n                        pull request review comment <a target=\"_blank\" href={GITHUB_URL+event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                    </span>\r\n                )\r\n            case \"PublicEvent\":\r\n                return(\r\n                    <span>\r\n                        made <a target=\"_blank\" href={GITHUB_URL+event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                        public\r\n                    </span>\r\n                )\r\n            case \"IssueCommentEvent\":\r\n            url = event.payload.issue['url'].replace('https://api.github.com/repos/', GITHUB_URL)\r\n            return(\r\n                <span>\r\n                    commeted an issue <a target=\"_blank\" href={url}>{event.repo.name}</a>\r\n                </span>\r\n            )\r\n            case \"MemberEvent\":\r\n                return(\r\n                    <span>\r\n                        member event <a target=\"_blank\" href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"PullRequestEvent\":\r\n                return(\r\n                    <span>\r\n                    pull request <a target=\"_blank\" href={event.repo['url']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n        }\r\n        return(\r\n            <span>\r\n                made an activity\r\n            </span>\r\n        )\r\n    }\r\n    render() {\r\n        const events = this.props.events\r\n        return (\r\n            <div>\r\n            { events.length != 0 && events.map((event, i) => {\r\n                return(\r\n                    <div key={i} className={styles[\"content-div\"]}>\r\n                        <a className={styles[\"avatar-aligment\"]} target=\"_blank\" href={GITHUB_URL + event.actor['login']}>\r\n                            <img className={styles['event-avatar']}  src={event.actor['avatar_url']}/>\r\n                        </a>\r\n                        <a href={GITHUB_URL + event.actor['login']} target=\"_blank\">{event.actor['login']}</a>&nbsp;\r\n                        {this.checkeventType(event)}\r\n                    </div>\r\n                )\r\n            })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearcResult;\r\n","import React, { Component } from 'react';\r\nimport styles from './styles.module.css'\r\n\r\nconst UserInfo = ({user}) =>{\r\n    return(\r\n        <div className={\"row\"}>\r\n            {\r\n                user &&\r\n                <div className={\"col s3\"}>\r\n                    <img className={styles['avatar']}  src={user['avatar_url']} />\r\n                    <div>\r\n                        {user.login}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo","import React, { Component } from 'react';\nimport SearchBar from './SearchBar'\nimport axios from 'axios';\nimport SearchResult from './SearchResult'\nimport UserInfo from './UserInfo'\nimport styles from './styles.module.css'\nimport './App.css'\n\nconst GITHUB_URL = \"https://api.github.com/users/\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: '',\n      user: '',\n      page: 1,\n      err: ''\n    };\n  }\n\n  handleSubmit = (username) => {\n    this.setState({events: ''})\n    this.getEvents(username)\n    this.getUserInfo(username)\n  }\n\n  getUserInfo = (username) => {\n    axios.get(GITHUB_URL + username)\n    .then(res => {\n        let user = res.data;\n        this.setState({user, user})\n      })\n    }\n  getEvents = (username) => {\n    axios.get(GITHUB_URL + username + '/received_events?page=' + this.state.page)\n    .then(res => {\n      let events = res.data;\n      let event_l = [...this.state.events, events]\n      this.setState({events: event_l, err: ''})\n    }).catch(err => {\n      this.setState({err: 'User not found!', events: '', user: ''})\n    })\n  }\n\n  handleLoadButton = () => {\n    const page = this.state.page + 1\n    this.setState({page: page})\n    this.getEvents(this.state.user.login)\n  }\n  render() {\n      const events = this.state.events\n      const user = this.state.user\n      const err = this.state.err\n      return (\n        <div className=\"App\">\n          <nav>\n            <div className=\"nav-wrapper green darken-1\">\n              <a href=\"#\" className=\"brand-logo\" style={{marginLeft: '20px'}}>Github User Timeline</a>\n            </div>\n          </nav>\n          <hr/>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col s3\">\n                <UserInfo user = {user} />\n              </div>\n              <div className=\"col s9\">\n                <SearchBar handleSubmit={this.handleSubmit} />\n              {\n                events && !err && events.map((event, i) => {\n                  return(\n                    <SearchResult events={event} page={this.state.page} username={this.state.user} />\n                  )\n                })\n              }\n              {\n                events &&\n                <button className=\"waves-effect waves-light btn orange accent-2\" onClick={() => {this.handleLoadButton()}}><i className=\"material-icons right\">cloud</i>Load...</button>\n              }\n              {\n                err &&\n                  <div>\n                    User not found\n                  </div>\n              }\n              </div>\n          </div>\n        </div>\n        <a id=\"forkMe\" className={styles['forkMe']} href=\"https://github.com/ebrugulec/timeline\">View on GitHub</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}