{"version":3,"sources":["components/styles.module.css","components/SearchBar.js","components/SearchResult.js","components/UserInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","avatar","event-avatar","content-div","avatar-aligment","navbar","SearcBar","state","username","handleChange","e","_this","setState","target","value","handleSearchButton","props","handleSubmit","_this2","this","react_default","a","createElement","className","type","placeholder","name","onChange","onClick","Component","GITHUB_URL","SearcResult","handleLoadButton","page","handlePage","checkeventType","event","url","href","repo","payload","forkee","issue","replace","events","map","i","key","styles","actor","src","UserInfo","_ref","user","login","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getEvents","getUserInfo","axios","get","then","res","data","defineProperty","event_l","toConsumableArray","concat","SearchBar","SearchResult","components_UserInfo","React","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a5f1e63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"styles_avatar__2eSEr\",\"event-avatar\":\"styles_event-avatar__2VLa_\",\"content-div\":\"styles_content-div__2hxuJ\",\"avatar-aligment\":\"styles_avatar-aligment__3r_0g\",\"navbar\":\"styles_navbar__2h0vE\"};","import React, { Component } from 'react';\r\n\r\nclass SearcBar extends Component {\r\n    state = {\r\n        username: ''\r\n    }\r\n   handleChange = (e) => {\r\n       this.setState({username: e.target.value})\r\n   }\r\n\r\n   handleSearchButton = () => {\r\n    this.props.handleSubmit(this.state.username)\r\n   }\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"input-field col s4\">\r\n            <input type=\"text\" placeholder=\"Github Username\" value={this.state.username} name=\"name\" onChange={this.handleChange}  />\r\n        </div>\r\n        <div className=\"input-field col s4\">\r\n          <button className=\"waves-effect waves-light btn\" onClick={() => {this.handleSearchButton()}}><i className=\"material-icons right\">public</i>Search</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearcBar;\r\n","import React, { Component } from 'react';\r\nimport UserSummary from './UserSummary'\r\nimport styles from './styles.module.css'\r\n\r\nconst GITHUB_URL = \"http://www.github.com/\"\r\nclass SearcResult extends Component {\r\n    handleLoadButton = () => {\r\n        let page = this.props.page\r\n        page = page +1\r\n        this.props.handlePage(page)\r\n    }\r\n    checkeventType = (event) => {\r\n        let url;\r\n        switch(event.type){\r\n            case \"WatchEvent\":\r\n                return(\r\n                    <span>\r\n                    starred <a href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"CreateEvent\":\r\n                return(\r\n                    <span>\r\n                        created a repository <a href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"ForkEvent\":\r\n                return(\r\n                    <span>\r\n                        forked&nbsp;\r\n                        <a href={GITHUB_URL+event.payload.forkee['full_name']}>\r\n                            {event.payload.forkee['full_name']}\r\n                        </a> from&nbsp;&nbsp;\r\n                        <a href={GITHUB_URL + event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                    </span>\r\n                )\r\n            case \"PushEvent\":\r\n                return(\r\n                    <span>\r\n                        push event <a href={GITHUB_URL+event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"IssuesEvent\":\r\n            url = event.payload.issue['url'].replace('https://api.github.com/repos/', GITHUB_URL)\r\n            return(\r\n                    <span>\r\n                        issue activites <a href={url}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"PullRequestReviewCommentEvent\":\r\n                return(\r\n                    <span>\r\n                        pull request review comment <a href={GITHUB_URL+event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                    </span>\r\n                )\r\n            case \"PublicEvent\":\r\n                return(\r\n                    <span>\r\n                        made <a href={GITHUB_URL+event.repo['name']}>\r\n                            {event.repo['name']}\r\n                        </a>\r\n                        public\r\n                    </span>\r\n                )\r\n            case \"IssueCommentEvent\":\r\n            url = event.payload.issue['url'].replace('https://api.github.com/repos/', GITHUB_URL)\r\n            return(\r\n                <span>\r\n                    commeted an issue <a href={url}>{event.repo.name}</a>\r\n                </span>\r\n            )\r\n            case \"MemberEvent\":\r\n                return(\r\n                    <span>\r\n                        member event <a href={GITHUB_URL + event.repo['name']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n            case \"PullRequestEvent\":\r\n                return(\r\n                    <span>\r\n                    pull request <a href={event.repo['url']}>{event.repo['name']}</a>\r\n                    </span>\r\n                )\r\n        }\r\n        return(\r\n            <span>\r\n                made an activity\r\n            </span>\r\n        )\r\n    }\r\n    render() {\r\n        const events = this.props.events\r\n        return (\r\n            <div>\r\n            { events && events.map((event, i) => {\r\n                return(\r\n                    <div key={i} className={styles[\"content-div\"]}>\r\n                        <a className={styles[\"avatar-aligment\"]} href={GITHUB_URL + event.actor['login']}>\r\n                            <img className={styles['event-avatar']}  src={event.actor['avatar_url']}/>\r\n                        </a>\r\n                        <a href={GITHUB_URL + event.actor['login']}>{event.actor['login']}</a>&nbsp;\r\n                        {this.checkeventType(event)}\r\n                    </div>\r\n                )\r\n            })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearcResult;\r\n","import React, { Component } from 'react';\r\nimport styles from './styles.module.css'\r\n\r\nconst UserInfo = ({user}) =>{\r\n    return(\r\n        <div>\r\n            {\r\n                user &&\r\n                <div>\r\n                    <img className={styles['avatar']}  src={user['avatar_url']} />\r\n                    {user.login}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo","import React, { Component } from 'react';\nimport SearchBar from './SearchBar'\nimport axios from 'axios';\nimport SearchResult from './SearchResult'\nimport UserInfo from './UserInfo'\nimport styles from './styles.module.css'\n\n\nconst GITHUB_URL = \"https://api.github.com/users/\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: '',\n      user: '',\n      page: 1\n    };\n  }\n\n  handleSubmit = (username) => {\n    this.setState({events: ''})\n    this.getEvents(username)\n    this.getUserInfo(username)\n  }\n\n  getUserInfo = (username) => {\n    axios.get(GITHUB_URL + username)\n    .then(res => {\n        let user = res.data;\n        this.setState({user, user})\n      })\n    }\n  getEvents = (username) => {\n    axios.get(GITHUB_URL + username + '/received_events?page=' + this.state.page)\n    .then(res => {\n      let events = res.data;\n      let event_l = [...this.state.events, events]\n      this.setState({events: event_l})\n    })\n  }\n\n  handleLoadButton = () => {\n    const page = this.state.page + 1\n    this.setState({page: page})\n    this.getEvents(this.state.user.login)\n  }\n    render() {\n      const events = this.state.events\n      const user = this.state.user\n      return (\n        <div className=\"App\">\n          <nav>\n            <div className=\"nav-wrapper\">\n              <a href=\"#\" className=\"brand-logo\">Github User Timeline</a>\n            </div>\n          </nav>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col s9\">\n                <SearchBar handleSubmit={this.handleSubmit} />\n              <div className=\"row\">\n              {\n                events && events.map((event, i) => {\n                  return(\n                    <SearchResult events={event} page={this.state.page} username={this.state.user} />\n                  )\n                })\n              }\n              {\n                events &&\n                <button className=\"waves-effect waves-light btn red lighten-2\" onClick={() => {this.handleLoadButton()}}><i className=\"material-icons right\">cloud</i>Load...</button>\n              }\n              </div>\n            </div>\n            <div className=\"col s3\" className={styles[\"navbar\"]}>\n              <UserInfo user = {user} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}